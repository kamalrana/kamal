package com.bebo.logparser;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;

import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;

import java.util.Date;
import javax.swing.JOptionPane;
import org.apache.log4j.Logger;

import com.toedter.calendar.JDateChooser;


public class WhereClausePanel extends javax.swing.JPanel {

    Logger logger = Logger.getLogger(WhereClausePanel.class.getName());
    String whereQuery = "";
    boolean noErrorOccuredflag = true;

    StringBuffer whereClauseQuery = new StringBuffer();
    JFrame whereFrame;
   
    /** Creates new form WhereClausePanel */
    public WhereClausePanel( JFrame whereFrame ) {
        
        initComponents();
        this.whereFrame = whereFrame;
    
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        lblDate = new JLabel();
        lblTimeTaken = new JLabel();
        lblSCwin32 = new JLabel();
        lblTime = new JLabel();
        lblSIP = new JLabel();
        lbsCSMethod = new JLabel();
        lblCSuri = new JLabel();
        lblCSuriquery = new JLabel();
        lblCSUsername = new JLabel();
        lblCip = new JLabel();
        lblCSUseragent = new JLabel();
        lblSCstatus = new JLabel();
        lblSCsubstatus = new JLabel();
        comboDate = new JComboBox();
        comboTime = new JComboBox();
        comboSIP = new JComboBox();
        comboCSMethod = new JComboBox();
        comboCSuri = new JComboBox();
        comboCSuriquery = new JComboBox();
        comboUsername = new JComboBox();
        comboCIP = new JComboBox();
        comboUserAgent = new JComboBox();
        comboSCstatus = new JComboBox();
        comboSCsubstatus = new JComboBox();
        comboSCwin32 = new JComboBox();
        comboTimeTaken = new JComboBox();
        txtSIP = new JTextField();
        txtSCstatus = new JTextField();
        txtSCsubstatus = new JTextField();
        txtSCwin32 = new JTextField();
        txtTimeTaken = new JTextField();
        txtCIP = new JTextField();
        txtTime = new JTextField();
        txtCSMethod = new JTextField();
        txtCSUsername = new JTextField();
        txtCSuri = new JTextField();
        txtUserAgent = new JTextField();
        txtCSuriquery = new JTextField();
        btnSubmitWhereClause = new JButton();
        jDateChooser1 = new JDateChooser();

        lblDate.setText("date");

        lblTimeTaken.setText("time-taken");

        lblSCwin32.setText("sc-win32-status");

        lblTime.setText("time");

        lblSIP.setText("s-ip");

        lbsCSMethod.setText("cs-method");

        lblCSuri.setText("cs-uri-stem");

        lblCSuriquery.setText("cs-uri-query");

        lblCSUsername.setText("cs-username");

        lblCip.setText("c-ip");

        lblCSUseragent.setText("cs(User-Agent)");

        lblSCstatus.setText("sc-status");

        lblSCsubstatus.setText("sc-substatus");

        comboDate.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "Equal", "Not Equal" }));

        comboTime.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "Equal", "Not Equal" }));

        comboSIP.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "Equal", "Not Equal" }));
        comboSIP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                comboSIPMouseEntered(evt);
            }
        });

        comboCSMethod.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "EQUAL", "NOT EQUAL" }));

        comboCSuri.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "EQUAL", "NOT EQUAL" }));

        comboCSuriquery.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "EQUAL", "NOT EQUAL" }));

        comboUsername.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "EQUAL", "NOT EQUAL" }));

        comboCIP.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "Equal", "Not Equal" }));
        comboCIP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                comboCIPMouseEntered(evt);
            }
        });

        comboUserAgent.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "EQUAL", "NOT EQUAL" }));

        comboSCstatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "Equal", "Not Equal", "Less Than", "Greater Than" }));

        comboSCsubstatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "Equal", "Not Equal", "Less Than", "Greater Than" }));

        comboSCwin32.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "Equal", "Not Equal", "Less Than", "Greater Than" }));

        comboTimeTaken.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "Equal", "Not Equal", "Less Than", "Greater Than" }));

        txtTime.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                txtTimeMouseEntered(evt);
            }
        });

        btnSubmitWhereClause.setText( "Submit" );

        btnSubmitWhereClause.addActionListener( new ActionListener() {
            public void actionPerformed( ActionEvent evt ) {
                btnSubmitWhereClauseActionPerformed( evt );
            }
        });

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDate)
                    .addComponent(lblTime)
                    .addComponent(lblSIP)
                    .addComponent(lbsCSMethod)
                    .addComponent(lblCSuri)
                    .addComponent(lblCSuriquery)
                    .addComponent(lblCSUsername)
                    .addComponent(lblCip)
                    .addComponent(lblCSUseragent)
                    .addComponent(lblSCstatus)
                    .addComponent(lblSCsubstatus)
                    .addComponent(lblSCwin32)
                    .addComponent(lblTimeTaken))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSubmitWhereClause)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(comboTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTime))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(comboTimeTaken, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTimeTaken, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(comboSCwin32, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSCwin32, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(comboSCsubstatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSCsubstatus, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(comboUserAgent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtUserAgent, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(comboUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCSUsername, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(comboCSuriquery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCSuriquery, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(comboCSuri, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCSuri, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(comboCSMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCSMethod, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(comboSIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSIP, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(comboCIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCIP))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(comboSCstatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSCstatus, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(comboDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(146, 146, 146)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblCSUseragent, lblCSUsername, lblCSuri, lblCSuriquery, lblCip, lblDate, lblSCstatus, lblSCsubstatus, lblSCwin32, lblSIP, lblTime, lblTimeTaken, lbsCSMethod});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtCIP, txtCSMethod, txtCSUsername, txtCSuri, txtCSuriquery, txtSCstatus, txtSCsubstatus, txtSCwin32, txtSIP, txtTime, txtTimeTaken, txtUserAgent});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {comboCIP, comboCSMethod, comboCSuri, comboCSuriquery, comboDate, comboSCstatus, comboSCsubstatus, comboSCwin32, comboSIP, comboTime, comboTimeTaken, comboUserAgent, comboUsername});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblDate)
                        .addComponent(comboDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTime)
                    .addComponent(comboTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSIP)
                    .addComponent(comboSIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbsCSMethod)
                    .addComponent(comboCSMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCSMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCSuri)
                    .addComponent(comboCSuri, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCSuri, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCSuriquery)
                    .addComponent(comboCSuriquery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCSuriquery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCSUsername)
                    .addComponent(comboUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCSUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCip)
                    .addComponent(comboCIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCSUseragent)
                    .addComponent(comboUserAgent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtUserAgent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSCstatus)
                    .addComponent(comboSCstatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSCstatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSCsubstatus)
                    .addComponent(comboSCsubstatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSCsubstatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSCwin32)
                    .addComponent(comboSCwin32, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSCwin32, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTimeTaken)
                    .addComponent(comboTimeTaken, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTimeTaken, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnSubmitWhereClause)
                .addContainerGap(27, Short.MAX_VALUE))
        );
    }// </editor-fold>                        

    private void btnSubmitWhereClauseActionPerformed( ActionEvent evt) {                                                     

    try{

       noErrorOccuredflag = true;

       getDateCondition();
       getTimeCondition();
       getCIPCondition();
       getSIPCondition();
       getSCStatusCondition();
       getSCSubStatusClause();
       getSCWin32StatusClause();
       getTimeTakenClause();
       getCSMethodClause();
       getCSUriStemClause();
       getCSUriQueryClause();
       getUserAgentClause();
       getUsernameClause();

      
       }catch(Exception e){

           logger.error("Exception occured " + e.getMessage());
        }
       if( noErrorOccuredflag ){

           if( whereClauseQuery.length() > 0 )
            whereQuery = whereClauseQuery.substring( 0 , whereClauseQuery.lastIndexOf( "AND" ) - 1 );
            whereFrame.dispose();
        }   
    }                                                    

     /** where clause for cs-username field */
    private void getUsernameClause(){

       String username_Query = "";

       Object actionUsernameStatus = comboUsername.getSelectedItem();

       String username_Chooser = txtCSUsername.getText();

       logger.trace("username Status : " + actionUsernameStatus.toString());

       if( !"Select".equals(actionUsernameStatus.toString())){

       if( "EQUAL".equals(actionUsernameStatus.toString())){

           if( username_Chooser == null || username_Chooser.length() == 0 ){
               JOptionPane.showMessageDialog(this, "cs-username field is empty");
               noErrorOccuredflag = false;
           }else{

               username_Query = "cs-username='"+username_Chooser+"' AND ";
           }
       }
       if( "NOT EQUAL".equals(actionUsernameStatus.toString())){

         if( username_Chooser == null || username_Chooser.length() == 0 ){
               JOptionPane.showMessageDialog(this, "cs-username field is empty");
               noErrorOccuredflag = false;
           }else{

               username_Query = "cs-username<>'"+username_Chooser+"' AND ";
           }

       }
      }
       whereClauseQuery.append(username_Query);
    }


    /** where clause for cs(User-Agent) field */
    private void getUserAgentClause(){

       String userAgent_Query = "";

       Object actionUserAgentStatus = comboUserAgent.getSelectedItem();

       String userAgent_Chooser = txtUserAgent.getText();

       logger.trace("user agent Status : " + actionUserAgentStatus.toString());

       if( !"Select".equals(actionUserAgentStatus.toString())){

       if( "EQUAL".equals(actionUserAgentStatus.toString())){

           if( userAgent_Chooser == null || userAgent_Chooser.length() == 0 ){
               JOptionPane.showMessageDialog(this, "cs(uri-agent) field is empty");
               noErrorOccuredflag = false;
           }else{

               userAgent_Query = "cs(User-Agent)='"+userAgent_Chooser+"' AND ";
           }
       }
       if( "NOT EQUAL".equals(actionUserAgentStatus.toString())){

         if( userAgent_Chooser == null || userAgent_Chooser.length() == 0 ){
               JOptionPane.showMessageDialog(this, "cs(uri-agent) field is empty");
               noErrorOccuredflag = false;
           }else{

               userAgent_Query = "cs(User-Agent)<>'"+userAgent_Chooser+"' AND ";
           }

       }
      }
       whereClauseQuery.append(userAgent_Query);

    }


    /** where clause for cs-uri-query field */
    private void getCSUriQueryClause(){

      String csUri_Query = "";

       Object actionCSUriQueryStatus = comboCSuriquery.getSelectedItem();

       String csUriQuery_Chooser = txtCSuriquery.getText();

       logger.trace("cs-uri-query Status : " + actionCSUriQueryStatus.toString());

       if( !"Select".equals(actionCSUriQueryStatus.toString())){

       if( "EQUAL".equals(actionCSUriQueryStatus.toString())){

           if( csUriQuery_Chooser == null || csUriQuery_Chooser.length() == 0 ){
               JOptionPane.showMessageDialog(this, "cs-uri-query field is empty");
               noErrorOccuredflag = false;
           }else{

               csUri_Query = "cs-uri-query='"+csUriQuery_Chooser+"' AND ";
           }
       }
       if( "NOT EQUAL".equals(actionCSUriQueryStatus.toString())){

         if( csUriQuery_Chooser == null || csUriQuery_Chooser.length() == 0 ){
               JOptionPane.showMessageDialog(this, "cs-uri-query field is empty");
               noErrorOccuredflag = false;
           }else{

               csUri_Query = "cs-uri-query<>'"+csUriQuery_Chooser+"' AND ";
           }

       }
      }
       whereClauseQuery.append(csUri_Query);
    }

    /** where clause for cs-uri-stem field */
    private void getCSUriStemClause(){

        String csUriStem_Query = "";

       Object actionCSUriStatus = comboCSuri.getSelectedItem();

       String csUriStem_Chooser = txtCSuri.getText();

       logger.trace("cs-uri-stem Status : " + actionCSUriStatus.toString());

       if( !"Select".equals(actionCSUriStatus.toString())){

       if( "EQUAL".equals(actionCSUriStatus.toString())){

           if( csUriStem_Chooser == null || csUriStem_Chooser.length() == 0 ){
               JOptionPane.showMessageDialog(this, "cs-uri-stem field is empty");
               noErrorOccuredflag = false;
           }else{

               csUriStem_Query = "cs-uri-stem='"+csUriStem_Chooser+"' AND ";
           }
       }
       if( "NOT EQUAL".equals(actionCSUriStatus.toString())){

         if( csUriStem_Chooser == null || csUriStem_Chooser.length() == 0 ){
               JOptionPane.showMessageDialog(this, "cs-uri-stem field is empty");
               noErrorOccuredflag = false;
           }else{

               csUriStem_Query = "cs-uri-stem<>'"+csUriStem_Chooser+"' AND ";
           }

       }
      }
      whereClauseQuery.append(csUriStem_Query);
    }

    /** where clause for cs-method field */
    private void getCSMethodClause(){

       String csMethod_Query = "";

       Object actionCSMethodStatus = comboCSMethod.getSelectedItem();

       String csMethod_Chooser = txtCSMethod.getText();

       logger.trace("cs-method Status : " + actionCSMethodStatus.toString());

        if( !"Select".equals(actionCSMethodStatus.toString())){

            if( "EQUAL".equals(actionCSMethodStatus.toString())){

                if( csMethod_Chooser == null || csMethod_Chooser.length() == 0 ){
                JOptionPane.showMessageDialog(this,"cs-method field is empty" );
                noErrorOccuredflag = false;
                }else{
                    csMethod_Chooser = csMethod_Chooser.toUpperCase();

                    csMethod_Query = "cs-method='"+csMethod_Chooser+"' AND ";
                }
            }else if( "NOT EQUAL".equals(actionCSMethodStatus.toString())){

                if( csMethod_Chooser == null || csMethod_Chooser.length() == 0 ){
                JOptionPane.showMessageDialog(this,"cs-method field is empty" );
                noErrorOccuredflag = false;
                }else{
                    csMethod_Chooser = csMethod_Chooser.toUpperCase();

                    csMethod_Query = "cs-method<>'"+csMethod_Chooser+"' AND ";
                }
            }
        }
       whereClauseQuery.append(csMethod_Query);
       
     }

    /** where clause for time-taken field */
    private void getTimeTakenClause(){

         String timeTaken_Query = "";

        Object actionTimeTakenStatus = comboTimeTaken.getSelectedItem();

        String timeTaken_Chooser = txtTimeTaken.getText();

         logger.trace("Time Taken Status : " + actionTimeTakenStatus.toString());

          if( !"Select".equals(actionTimeTakenStatus.toString())){

            if( "Equal".equals(actionTimeTakenStatus.toString())){

             if( timeTaken_Chooser == null || timeTaken_Chooser.length() == 0 ){

             JOptionPane.showMessageDialog(this,"time-taken field is empty" );
             noErrorOccuredflag = false;
             }else{
                 int time_taken=0;
                 try{
                  time_taken = Integer.parseInt( timeTaken_Chooser );
                 }catch( NumberFormatException nfe ){
                      JOptionPane.showMessageDialog(this,"Enter valid integer value for time-taken" );
                      noErrorOccuredflag = false;
                 }
                 if( time_taken >= 0 ){
                     timeTaken_Query = "time-taken="+time_taken+" AND ";
                 }
             }

            }else if( "Not Equal".equals(actionTimeTakenStatus.toString())){

                if( timeTaken_Chooser == null || timeTaken_Chooser.length() == 0 ){

             JOptionPane.showMessageDialog(this,"time-taken field is empty" );
             noErrorOccuredflag = false;
             }else{
                 int time_taken=0;
                 try{
                  time_taken = Integer.parseInt( timeTaken_Chooser );
                 }catch( NumberFormatException nfe ){
                      JOptionPane.showMessageDialog(this,"Enter valid integer value for time-taken" );
                      noErrorOccuredflag = false;
                 }
                 if( time_taken >= 0 ){
                     timeTaken_Query = "time-taken<>"+time_taken+" AND ";
                 }
             }

            }else if( "Less Than".equals(actionTimeTakenStatus.toString())){

                if( timeTaken_Chooser == null || timeTaken_Chooser.length() == 0 ){

             JOptionPane.showMessageDialog(this,"time-taken field is empty" );
             noErrorOccuredflag = false;
             }else{
                 int time_taken=0;
                 try{
                  time_taken = Integer.parseInt( timeTaken_Chooser );
                 }catch( NumberFormatException nfe ){
                      JOptionPane.showMessageDialog(this,"Enter valid integer value for time-taken" );
                      noErrorOccuredflag = false;
                 }
                 if( time_taken >= 0 ){
                     timeTaken_Query = "time-taken<"+time_taken+" AND ";
                 }
             }

            }else{

                if( timeTaken_Chooser == null || timeTaken_Chooser.length() == 0 ){

             JOptionPane.showMessageDialog(this,"time-taken field is empty" );
             noErrorOccuredflag = false;
             }else{
                 int time_taken=0;
                 try{
                  time_taken = Integer.parseInt( timeTaken_Chooser );
                 }catch( NumberFormatException nfe ){
                      JOptionPane.showMessageDialog(this,"Enter valid integer value for time-taken" );
                      noErrorOccuredflag = false;
                 }
                 if( time_taken >= 0 ){
                     timeTaken_Query = "time-taken>"+time_taken+" AND ";
                 }
             }

            }
        }
        whereClauseQuery.append(timeTaken_Query);
    }

    /** where clause for sc-win32status field */
    private void getSCWin32StatusClause(){

        String sc_Win32StatusQuery = "";

        Object actionSCWin32Status = comboSCwin32.getSelectedItem();

        String scWin32Status_Chooser = txtSCwin32.getText();

         logger.trace("sc-Win32status : " + actionSCWin32Status.toString());

          if( !"Select".equals(actionSCWin32Status.toString())){

            if( "Equal".equals(actionSCWin32Status.toString())){

             if( scWin32Status_Chooser == null || scWin32Status_Chooser.length() == 0 ){

             JOptionPane.showMessageDialog(this,"sc-win32status field is empty" );
             noErrorOccuredflag = false;
             }else{
                 int sc_win32status=0;
                 try{
                  sc_win32status = Integer.parseInt( scWin32Status_Chooser );
                 }catch( NumberFormatException nfe ){
                      JOptionPane.showMessageDialog(this,"Enter valid integer value for sc-win32status" );
                      noErrorOccuredflag = false;
                 }
                 if( sc_win32status >= 0 ){
                     sc_Win32StatusQuery = "sc-win32-status="+sc_win32status+" AND ";
                 }
             }

            }else if( "Not Equal".equals(actionSCWin32Status.toString())){

                if( scWin32Status_Chooser == null || scWin32Status_Chooser.length() == 0 ){

             JOptionPane.showMessageDialog(this,"sc-win32status field is empty" );
             noErrorOccuredflag = false;
             }else{
                 int sc_win32status=0;
                 try{
                  sc_win32status = Integer.parseInt( scWin32Status_Chooser );
                 }catch( NumberFormatException nfe ){
                      JOptionPane.showMessageDialog(this,"Enter valid integer value for sc-win32status" );
                      noErrorOccuredflag = false;
                 }
                 if( sc_win32status >= 0 ){
                     sc_Win32StatusQuery = "sc-win32-status<>"+sc_win32status+" AND ";
                 }
             }

            }else if( "Less Than".equals(actionSCWin32Status.toString())){

                if( scWin32Status_Chooser == null || scWin32Status_Chooser.length() == 0 ){

             JOptionPane.showMessageDialog(this,"sc-win32status field is empty" );
             noErrorOccuredflag = false;
             }else{
                 int sc_win32status=0;
                 try{
                  sc_win32status = Integer.parseInt( scWin32Status_Chooser );
                 }catch( NumberFormatException nfe ){
                      JOptionPane.showMessageDialog(this,"Enter valid integer value for sc-win32status" );
                      noErrorOccuredflag = false;
                 }
                 if( sc_win32status >= 0 ){
                     sc_Win32StatusQuery = "sc-win32-status<"+sc_win32status+" AND ";
                 }
             }

            }else{

                if( scWin32Status_Chooser == null || scWin32Status_Chooser.length() == 0 ){

             JOptionPane.showMessageDialog(this,"sc-win32status field is empty" );
             noErrorOccuredflag = false;
             }else{
                 int sc_win32status=0;
                 try{
                  sc_win32status = Integer.parseInt( scWin32Status_Chooser );
                 }catch( NumberFormatException nfe ){
                      JOptionPane.showMessageDialog(this,"Enter valid integer value for sc-win32status" );
                      noErrorOccuredflag = false;
                 }
                 if( sc_win32status >= 0 ){
                     sc_Win32StatusQuery = "sc-win32-status>"+sc_win32status+" AND ";
                 }
             }

            }
        }
        whereClauseQuery.append(sc_Win32StatusQuery);

    }

     /** where clause for sc-substatus field */
    private void getSCSubStatusClause(){

        String sc_SubStatusQuery = "";

        Object actionSCSubStatus = comboSCsubstatus.getSelectedItem();

        String scSubStatus_Chooser = txtSCsubstatus.getText();

         logger.trace("sc-substatus : " + actionSCSubStatus.toString());

          if( !"Select".equals(actionSCSubStatus.toString())){

            if( "Equal".equals(actionSCSubStatus.toString())){

             if( scSubStatus_Chooser == null || scSubStatus_Chooser.length() == 0 ){

             JOptionPane.showMessageDialog(this,"sc-substatus field is empty" );
             noErrorOccuredflag = false;
             }else{
                 int sc_substatus=0;
                 try{
                  sc_substatus = Integer.parseInt( scSubStatus_Chooser );
                 }catch( NumberFormatException nfe ){
                      JOptionPane.showMessageDialog(this,"Enter valid integer value for sc-substatus" );
                      noErrorOccuredflag = false;
                 }
                 if( sc_substatus >= 0 ){
                     sc_SubStatusQuery = "sc-substatus="+sc_substatus+" AND ";
                 }
             }

            }else if( "Not Equal".equals(actionSCSubStatus.toString())){

                if( scSubStatus_Chooser == null || scSubStatus_Chooser.length() == 0 ){

             JOptionPane.showMessageDialog(this,"sc-substatus field is empty" );
             noErrorOccuredflag = false;
             }else{
                 int sc_substatus=0;
                 try{
                  sc_substatus = Integer.parseInt( scSubStatus_Chooser );
                 }catch( NumberFormatException nfe ){
                      JOptionPane.showMessageDialog(this,"Enter valid integer value for sc-substatus" );
                      noErrorOccuredflag = false;
                 }
                 if( sc_substatus >= 0 ){
                     sc_SubStatusQuery = "sc-substatus<>"+sc_substatus+" AND ";
                 }
             }

            }else if( "Less Than".equals(actionSCSubStatus.toString())){

                if( scSubStatus_Chooser == null || scSubStatus_Chooser.length() == 0 ){

             JOptionPane.showMessageDialog(this,"sc-substatus field is empty" );
             noErrorOccuredflag = false;
             }else{
                 int sc_substatus=0;
                 try{
                  sc_substatus = Integer.parseInt( scSubStatus_Chooser );
                 }catch( NumberFormatException nfe ){
                      JOptionPane.showMessageDialog(this,"Enter valid integer value for sc-substatus" );
                      noErrorOccuredflag = false;
                 }
                 if( sc_substatus >= 0 ){
                     sc_SubStatusQuery = "sc-substatus<"+sc_substatus+" AND ";
                 }
             }

            }else{

                if( scSubStatus_Chooser == null || scSubStatus_Chooser.length() == 0 ){

             JOptionPane.showMessageDialog(this,"sc-substatus field is empty" );
             noErrorOccuredflag = false;
             }else{
                 int sc_substatus=0;
                 try{
                  sc_substatus = Integer.parseInt( scSubStatus_Chooser );
                 }catch( NumberFormatException nfe ){
                      JOptionPane.showMessageDialog(this,"Enter valid integer value for sc-substatus" );
                      noErrorOccuredflag = false;
                 }
                 if( sc_substatus >= 0 ){
                     sc_SubStatusQuery = "sc-substatus>"+sc_substatus+" AND ";
                 }
             }

            }
        }
        whereClauseQuery.append(sc_SubStatusQuery);

    }

     /** where clause for sc-status field */
    private void getSCStatusCondition(){

        String sc_StatusQuery = "";

        Object actionSCStatus = comboSCstatus.getSelectedItem();

        String scStatus_Chooser = txtSCstatus.getText();

         logger.trace("sc-status : " + actionSCStatus.toString());

          if( !"Select".equals(actionSCStatus.toString())){

            if( "Equal".equals(actionSCStatus.toString())){

             if( scStatus_Chooser == null || scStatus_Chooser.length() == 0 ){

             JOptionPane.showMessageDialog(this,"sc-status field is empty" );
             noErrorOccuredflag = false;
             }else{
                 int sc_status=0;
                 try{
                  sc_status = Integer.parseInt( scStatus_Chooser );
                 }catch( NumberFormatException nfe ){
                      JOptionPane.showMessageDialog(this,"Enter valid integer value for sc-status" );
                      noErrorOccuredflag = false;
                 }
                 if( sc_status >= 0 ){
                     sc_StatusQuery = "sc-status="+sc_status+" AND ";
                 }
             }

            }else if( "Not Equal".equals(actionSCStatus.toString())){

                if( scStatus_Chooser == null || scStatus_Chooser.length() == 0 ){

             JOptionPane.showMessageDialog(this,"sc-status field is empty" );
             noErrorOccuredflag = false;
             }else{
                 int sc_status=0;
                 try{
                  sc_status = Integer.parseInt( scStatus_Chooser );
                 }catch( NumberFormatException nfe ){
                      JOptionPane.showMessageDialog(this,"Enter valid integer value for sc-status" );
                      noErrorOccuredflag = false;
                 }
                 if( sc_status >= 0 ){
                     sc_StatusQuery = "sc-status<>"+sc_status+" AND ";
                 }
             }

            }else if( "Less Than".equals(actionSCStatus.toString())){

                if( scStatus_Chooser == null || scStatus_Chooser.length() == 0 ){

             JOptionPane.showMessageDialog(this,"sc-status field is empty" );
             noErrorOccuredflag = false;
             }else{
                 int sc_status=0;
                 try{
                  sc_status = Integer.parseInt( scStatus_Chooser );
                 }catch( NumberFormatException nfe ){
                      JOptionPane.showMessageDialog(this,"Enter valid integer value for sc-status" );
                      noErrorOccuredflag = false;
                 }
                 if( sc_status >= 0 ){
                     sc_StatusQuery = "sc-status<"+sc_status+" AND ";
                 }
             }

            }else{

                if( scStatus_Chooser == null || scStatus_Chooser.length() == 0 ){

             JOptionPane.showMessageDialog(this,"sc-status field is empty" );
             noErrorOccuredflag = false;
             }else{
                 int sc_status=0;
                 try{
                  sc_status = Integer.parseInt( scStatus_Chooser );
                 }catch( NumberFormatException nfe ){
                      JOptionPane.showMessageDialog(this,"Enter valid integer value for sc-status" );
                      noErrorOccuredflag = false;
                 }
                 if( sc_status >= 0 ){
                     sc_StatusQuery = "sc-status>"+sc_status+" AND ";
                 }
             }

            }
        }
        whereClauseQuery.append(sc_StatusQuery);
    }

     /** where clause for s-ip field */
    private void getSIPCondition(){

         String s_ipQuery = "";

          Object actionSIP = comboSIP.getSelectedItem();
           String sip_Chooser = txtSIP.getText();

       logger.trace("SIP : " + actionSIP.toString());

        if( !"Select".equals(actionSIP.toString())){

            if( "Equal".equals(actionSIP.toString())){
             
              if( sip_Chooser == null || sip_Chooser.length() == 0 ){

                  JOptionPane.showMessageDialog(this,"s-ip field is empty" );
                  noErrorOccuredflag = false;
              }else{

              String [] timeElements = sip_Chooser.split("\\.");

              if( timeElements.length != 4 ){
              System.out.println("Time elements length :: " + timeElements.length);
                  JOptionPane.showMessageDialog(this,"Enter valid IP \n Please use tooltip for help" );
                  noErrorOccuredflag = false;
              }else{

              System.out.println("s-ip selected " + sip_Chooser);
              s_ipQuery = "s-ip='"+sip_Chooser+"' AND ";
              }
             }
            }
            if( "Not Equal".equals(actionSIP.toString())){
              
              if( sip_Chooser == null || sip_Chooser.length() == 0 ){

                  JOptionPane.showMessageDialog(this,"s-ip field is empty" );
                  noErrorOccuredflag = false;
              }else{

              String [] timeElements = sip_Chooser.split("\\.");

              if( timeElements.length != 4 ){

                  JOptionPane.showMessageDialog(this,"Enter valid IP \n Please use tooltip for help" );
                  noErrorOccuredflag = false;
              }else{

              System.out.println("s-ip selected " + sip_Chooser);
              s_ipQuery = "s-ip<>'"+sip_Chooser+"' AND ";
              }
             }
            }
        }
        whereClauseQuery.append(s_ipQuery);
    }

    /** where clause for c-ip field */
    private void getCIPCondition(){

        String c_ipQuery = "";

       Object actionCIP = comboCIP.getSelectedItem();

       logger.trace("CIP : " + actionCIP.toString());

        if( !"Select".equals(actionCIP.toString())){

            if( "Equal".equals(actionCIP.toString())){
              String cip_Chooser = txtCIP.getText();


              if( cip_Chooser == null || cip_Chooser.length() == 0 ){

                  JOptionPane.showMessageDialog(this,"c-ip field is empty" );
                  noErrorOccuredflag = false;
              }else{

              String [] timeElements = cip_Chooser.split("\\.");

              if( timeElements.length != 4 ){

                  JOptionPane.showMessageDialog(this,"Enter valid IP \n Please use tooltip for help" );
                  noErrorOccuredflag = false;
              }else{

              System.out.println("c-ip selected " + cip_Chooser);
              c_ipQuery = "c-ip='"+cip_Chooser+"' AND ";
              }
             }
            }
            if( "Not Equal".equals(actionCIP.toString())){
              String cip_Chooser = txtCIP.getText();


              if( cip_Chooser == null || cip_Chooser.length() == 0 ){

                  JOptionPane.showMessageDialog(this,"c-ip field is empty" );
                  noErrorOccuredflag = false;
              }else{

              String [] timeElements = cip_Chooser.split("\\.");

              if( timeElements.length != 4 ){

                  JOptionPane.showMessageDialog(this,"Enter valid IP \n Please use tooltip for help" );
                  noErrorOccuredflag = false;
              }else{

              System.out.println("c-ip selected " + cip_Chooser);
              c_ipQuery = "c-ip<>'"+cip_Chooser+"' AND ";
              }
             }
            }
        }
        whereClauseQuery.append(c_ipQuery);
    }

    /** where clause for time field */
    private void getTimeCondition(){

        String timeQuery = "";
       Object actionTime = comboTime.getSelectedItem();

       logger.trace("Time : " + actionTime.toString());


        if( !"Select".equals(actionTime.toString())){

            if( "Equal".equals(actionTime.toString())){
              String timeChooser = txtTime.getText();

              if( timeChooser == null || timeChooser.length() == 0 ){

                  JOptionPane.showMessageDialog(this,"Time is empty" );
                  noErrorOccuredflag = false;
              }else{

              String [] timeElements = timeChooser.split(":");

              if( timeElements.length != 3 ){

                  JOptionPane.showMessageDialog(this,"Enter valid time" );
                  noErrorOccuredflag = false;
              }else{
              
              System.out.println("Time selected " + timeChooser);
              timeQuery = "time='"+timeChooser+"' AND ";
              }
             }
           }
           if( "Not Equal".equals(actionTime.toString())){

             String timeChooser = txtTime.getText();

              if( timeChooser == null || timeChooser.length() == 0 ){

                  JOptionPane.showMessageDialog(this,"Time is empty" );
                  noErrorOccuredflag = false;
              }else{

              String [] timeElements = timeChooser.split(":");

              if( timeElements.length != 3 ){

                  JOptionPane.showMessageDialog(this,"Enter valid time" );
                  noErrorOccuredflag = false;
              }else{

              System.out.println("Time selected " + timeChooser);
              timeQuery = "time<>'"+timeChooser+"' AND ";
              }
             }
           }
          
        }
       whereClauseQuery.append(timeQuery);
    }


     /** where clause for date field */
    private void getDateCondition(){

        String dateQuery = "";

         Object actionDate = comboDate.getSelectedItem();
           logger.trace("Date : " + actionDate.toString());

            if( !"Select".equals(actionDate.toString())){

           if( "Equal".equals(actionDate.toString())){
              Date dateChooser = jDateChooser1.getDate();

              if( dateChooser == null ){

                  JOptionPane.showMessageDialog(this,"Date is empty" );
                  noErrorOccuredflag = false;
              }else{

              SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
              String dateSelected = dateFormat.format(dateChooser);
              System.out.println("Date selected " + dateSelected);
              dateQuery = "date='"+dateSelected+"' AND ";
               }
           }else if( "Not Equal".equals(actionDate.toString())){
              Date dateChooser = jDateChooser1.getDate();

              if( dateChooser == null ){

                  JOptionPane.showMessageDialog(this,"Date is empty" );
                  noErrorOccuredflag = false;
              }else{

              SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
              String dateSelected = dateFormat.format(dateChooser);
              System.out.println("Date selected " + dateSelected);
              dateQuery = "date<>'"+dateSelected+"' AND ";
               }
           }
       }
       whereClauseQuery.append(dateQuery);
    }

    private void txtTimeMouseEntered(java.awt.event.MouseEvent evt) {                                     
        // TODO add your handling code here:
        txtTime.setToolTipText(" eg. 'hh:mm:ss'");
    }                                    

    private void comboCIPMouseEntered(java.awt.event.MouseEvent evt) {                                      
        // TODO add your handling code here:
        txtCIP.setToolTipText("eg. '10.0.0.1'");
    }                                     

    private void comboSIPMouseEntered(java.awt.event.MouseEvent evt) {                                      
        // TODO add your handling code here:
        txtSIP.setToolTipText("eg. '10.0.0.1'");
    }                                     


    // Variables declaration - do not modify                     
    private javax.swing.JButton btnSubmitWhereClause;
    private javax.swing.JComboBox comboCIP;
    private javax.swing.JComboBox comboCSMethod;
    private javax.swing.JComboBox comboCSuri;
    private javax.swing.JComboBox comboCSuriquery;
    private javax.swing.JComboBox comboDate;
    private javax.swing.JComboBox comboSCstatus;
    private javax.swing.JComboBox comboSCsubstatus;
    private javax.swing.JComboBox comboSCwin32;
    private javax.swing.JComboBox comboSIP;
    private javax.swing.JComboBox comboTime;
    private javax.swing.JComboBox comboTimeTaken;
    private javax.swing.JComboBox comboUserAgent;
    private javax.swing.JComboBox comboUsername;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel lblCSUseragent;
    private javax.swing.JLabel lblCSUsername;
    private javax.swing.JLabel lblCSuri;
    private javax.swing.JLabel lblCSuriquery;
    private javax.swing.JLabel lblCip;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblSCstatus;
    private javax.swing.JLabel lblSCsubstatus;
    private javax.swing.JLabel lblSCwin32;
    private javax.swing.JLabel lblSIP;
    private javax.swing.JLabel lblTime;
    private javax.swing.JLabel lblTimeTaken;
    private javax.swing.JLabel lbsCSMethod;
    private javax.swing.JTextField txtCIP;
    private javax.swing.JTextField txtCSMethod;
    private javax.swing.JTextField txtCSUsername;
    private javax.swing.JTextField txtCSuri;
    private javax.swing.JTextField txtCSuriquery;
    private javax.swing.JTextField txtSCstatus;
    private javax.swing.JTextField txtSCsubstatus;
    private javax.swing.JTextField txtSCwin32;
    private javax.swing.JTextField txtSIP;
    private javax.swing.JTextField txtTime;
    private javax.swing.JTextField txtTimeTaken;
    private javax.swing.JTextField txtUserAgent;
    // End of variables declaration                   

}
